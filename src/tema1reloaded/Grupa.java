// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package tema1reloaded;

import java.util.ArrayList;
import java.util.HashMap;

/************************************************************/
/**
 * 
 */
public class Grupa {

	private String numeGrupa;
	private ArrayList<Elev> eleviInscrisi;
	private HashMap<String, HashMap <Materie, ArrayList<Integer>>> catalog;
	private HashMap<String, Integer> absente;
	

	public Grupa(String numeGrupa) {
		this.numeGrupa = numeGrupa;
		eleviInscrisi = new ArrayList<Elev>();
		catalog = new HashMap<>();
		absente = new HashMap<>();
	}
	
	public HashMap<String, HashMap<Materie, ArrayList<Integer>>> getCatalog() {
		return catalog;
	}
	
	public ArrayList<Elev> getEleviInscrisi() {
		return eleviInscrisi;
	}
	
	public String getNumeGrupa() {
		return numeGrupa;
	}
	
	public HashMap<String, Integer> getAbsente() {
		return absente;
	}
	
	public void adaugareElev(Elev elev) {
		
		if(!this.existaElev(elev.nume)) {
			eleviInscrisi.add(elev);
			absente.put(elev.nume, 0);
		}
		
		if(!catalog.containsKey(elev.nume)) {
			HashMap <Materie, ArrayList<Integer>> subiecteDeStudiu = new HashMap<>();
			for (Materie materie : Materie.values()) { 
			    ArrayList<Integer> noteMaterie = new ArrayList<>();
			    subiecteDeStudiu.put(materie, noteMaterie);
			}
			catalog.put(elev.nume, subiecteDeStudiu);
		}
		
	}
	
	private void stergereElev(Elev elev) {
		
		if(this.grupaAreElevi()) {
			if(existaElevObiect(elev)) {
				eleviInscrisi.remove(elev);
				catalog.remove(elev.nume);
				absente.remove(elev.nume);
			}
			else
				System.out.println("Grupa nu contine acest elev");
		}
		else
			System.out.println("Nu exista inca elevi in aceasta grupa");
	}


	public void afisareGrupa() {
		for(Elev elev : eleviInscrisi)
			System.out.println(elev.nume);
	}

	//use try-catch block
	public Elev getElev(String nume) {
		
		for(Elev elev : eleviInscrisi) {
			if(nume.equals(elev.nume))
				return elev;
		}
		
		System.out.println("Elevul nu exista");
		return null;
			
	}

	public void getNote(Elev elev, Materie materie) {
		if(catalog.containsKey(elev.nume)) {
			System.out.println(materie.name() + " " + catalog.get(elev.nume).get(materie).toString());
		}
	}

	/**
	 * 
	 */
	public int getAbsente(Elev elev) {
		if(this.existaElevObiect(elev))
			return absente.get(elev.nume);
		else return -1;
	}

	/**
	 * 
	 * @param elev 
	 * @param numeMaterie 
	 * @param nota 
	 * @return 
	 */
	
	public void adaugareNota(Elev elev, Materie materie, int nota) {
		if(this.existaElevObiect(elev)) {
			if(verificareNota(nota)) {
				catalog.get(elev.nume).get(materie).add(nota);
			}
		}
		else {
			System.out.println("Elevuol nu exita in aceasta grupa !");
		}
	}


	public void adaugareAbsenta(Elev elev, int absent) {
		if(this.existaElevObiect(elev)) {
			absente.put(elev.nume, absente.get(elev.nume) + absent);
		}
		else 
			System.out.println("Nu exista elevul");
	}
	
	public void motivareAbsenta(Elev elev) {
		if(sePotMotivaAbsente(elev)) {
			absente.put(elev.nume, absente.get(elev.nume) - 1);
		}
		else
			System.out.println(elev.nume + " nu are absente");
	}

	/**
	 * 
	 * @param numeElev 
	 * @return 
	 */
	public boolean existaElev(String numeElev) {
		for(int i=0; i < eleviInscrisi.size(); i++)
			if(eleviInscrisi.get(i).nume.equals(numeElev))
				return true;
		return false;
	}
	
	public boolean verificareNota(int nota) {
		if(nota > 0 && nota < 11) {
			return true;
		}
		return false;
	}
	
//	public boolean elevulAreNote(Elev elev) {
//		return this.catalog.get(elev.nume).get(Materie.Biologie).size() > 0;
//	}
	
	boolean sePotMotivaAbsente(Elev elev) {
		
		return absente.get(elev.nume) > 0;
	}
	
	public boolean existaElevObiect(Elev e) {
		return eleviInscrisi.contains(e);
	}
	
	public boolean grupaAreElevi() {
		return !eleviInscrisi.isEmpty();
	}
	
	public void topAbsente() {
	}

	/**
	 * 
	 */
	public void topEleviNote() {
		
	}
};

